//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bolt.Server;
using Owin;
using Service.Contracts;
using Service.Contracts.Parameters;


namespace Service.Contracts
{
    internal partial class ContactListProviderInvoker : Bolt.Server.ContractInvoker<Service.Contracts.ContactListProviderDescriptor>
    {
        public override void Init()
        {
            AddAction(Descriptor.GetContactsAsync, ContactListProvider_GetContactsAsync);
            AddAction(Descriptor.AddContactAsync, ContactListProvider_AddContactAsync);
            AddAction(Descriptor.DeleteContactAsync, ContactListProvider_DeleteContactAsync);
            AddAction(Descriptor.DoesContactExist, ContactListProvider_DoesContactExist);

            base.Init();
        }

        protected virtual async Task ContactListProvider_GetContactsAsync(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<IContactListProvider>(context);
            try
            {
                var result = await instance.GetContactsAsync(context.RequestAborted);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task ContactListProvider_AddContactAsync(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<Service.Contracts.Parameters.AddContactAsyncParameters>(context);
            var instance = InstanceProvider.GetInstance<IContactListProvider>(context);
            try
            {
                var result = await instance.AddContactAsync(parameters.Contact, context.RequestAborted);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task ContactListProvider_DeleteContactAsync(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<Service.Contracts.Parameters.DeleteContactAsyncParameters>(context);
            var instance = InstanceProvider.GetInstance<IContactListProvider>(context);
            try
            {
                await instance.DeleteContactAsync(parameters.ContactId, context.RequestAborted);
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task ContactListProvider_DoesContactExist(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<Service.Contracts.Parameters.DoesContactExistParameters>(context);
            var instance = InstanceProvider.GetInstance<IContactListProvider>(context);
            try
            {
                var result = instance.DoesContactExist(parameters.ContactId, context.RequestAborted);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }
    }
}

namespace Bolt.Server
{
    internal static partial class ContactListProviderInvokerExtensions
    {
        public static IAppBuilder UseContactListProvider(this IAppBuilder app, Service.Contracts.IContactListProvider instance, ServerConfiguration configuration = null)
        {
            return app.UseContactListProvider(new StaticInstanceProvider(instance), configuration);
        }

        public static IAppBuilder UseContactListProvider<TImplementation>(this IAppBuilder app, ServerConfiguration configuration = null) where TImplementation: Service.Contracts.IContactListProvider, new()
        {
            return app.UseContactListProvider(new InstanceProvider<TImplementation>(), configuration);
        }

        public static IAppBuilder UseStateFullContactListProvider<TImplementation>(this IAppBuilder app, ActionDescriptor initInstanceAction, ActionDescriptor releaseInstanceAction, string sessionHeader = null, TimeSpan? sessionTimeout = null, ServerConfiguration configuration = null) where TImplementation: Service.Contracts.IContactListProvider, new()
        {
            return app.UseContactListProvider(new StateFullInstanceProvider<TImplementation>(initInstanceAction, releaseInstanceAction, sessionHeader ?? app.GetBolt().Configuration.SessionHeader, sessionTimeout ?? app.GetBolt().Configuration.StateFullInstanceLifetime), configuration);
        }

        public static IAppBuilder UseContactListProvider(this IAppBuilder app, IInstanceProvider instanceProvider, ServerConfiguration configuration = null)
        {
            var boltExecutor = app.GetBolt();
            var invoker = new Service.Contracts.ContactListProviderInvoker();
            invoker.Init(configuration ?? boltExecutor.Configuration);
            invoker.InstanceProvider = instanceProvider;
            boltExecutor.Add(invoker);

            return app;
        }
    }
}