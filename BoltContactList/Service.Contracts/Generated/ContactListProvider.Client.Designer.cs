//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Client.Channels;
using Service.Contracts;
using Service.Contracts.Parameters;


namespace Service.Contracts
{
    public partial interface IContactListProviderAsync : IContactListProvider
    {
        Task<bool> DoesContactExistAsync(int contactId, System.Threading.CancellationToken cancellation);
    }
}

namespace Service.Contracts
{
    internal partial class ContactListProviderProxy : ContractProxy<Service.Contracts.ContactListProviderDescriptor>, Service.Contracts.IContactListProvider, IContactListProviderAsync
    {
        public ContactListProviderProxy(Service.Contracts.ContactListProviderProxy proxy) : base(proxy)
        {
        }

        public ContactListProviderProxy(IChannel channel) : base(channel)
        {
        }

        public virtual Task<List<Contact>> GetContactsAsync(System.Threading.CancellationToken cancellation)
        {
            return Channel.SendAsync<List<Contact>, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.GetContactsAsync, cancellation);
        }

        public virtual Task<Contact> AddContactAsync(Contact contact, System.Threading.CancellationToken cancellation)
        {
            var bolt_Params = new Service.Contracts.Parameters.AddContactAsyncParameters();
            bolt_Params.Contact = contact;
            return Channel.SendAsync<Contact, Service.Contracts.Parameters.AddContactAsyncParameters>(bolt_Params, Descriptor.AddContactAsync, cancellation);
        }

        public virtual Task DeleteContactAsync(int contactId, System.Threading.CancellationToken cancellation)
        {
            var bolt_Params = new Service.Contracts.Parameters.DeleteContactAsyncParameters();
            bolt_Params.ContactId = contactId;
            return Channel.SendAsync(bolt_Params, Descriptor.DeleteContactAsync, cancellation);
        }

        public virtual bool DoesContactExist(int contactId, System.Threading.CancellationToken cancellation)
        {
            var bolt_Params = new Service.Contracts.Parameters.DoesContactExistParameters();
            bolt_Params.ContactId = contactId;
            return Channel.Send<bool, Service.Contracts.Parameters.DoesContactExistParameters>(bolt_Params, Descriptor.DoesContactExist, cancellation);
        }

        public virtual Task<bool> DoesContactExistAsync(int contactId, System.Threading.CancellationToken cancellation)
        {
            var bolt_Params = new Service.Contracts.Parameters.DoesContactExistParameters();
            bolt_Params.ContactId = contactId;
            return Channel.SendAsync<bool, Service.Contracts.Parameters.DoesContactExistParameters>(bolt_Params, Descriptor.DoesContactExist, cancellation);
        }

    }
}